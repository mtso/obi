fun Queue() {
    self := [
        items = [],
        head = 0,
        tail = 0,
        empty = fun() {
            return self.size() <= 0;
        },
        size = fun() {
            return self.tail - self.head;
        },
        add = fun(item) {
            self.items.(self.tail) = item;
            self.tail = self.tail + 1;
        },
        poll = fun() {
            match (self.empty()) {
                true -> return nil;
                _ -> ();
            };
            item := self.items.(self.head);
            self.head = self.head + 1;
            return item;
        },
        peek = fun() {
            match (self.empty()) {
                true -> return nil;
                _ -> ();
            };
            return self.items.(self.head);
        },
    ];
    return self;
}

fun Map() {
    self := [
        defined = [],
        items = [],
        get = fun(key) {
            return match (self.defined.(key)) {
                true -> self.items.(key);
                _ -> nil;
            };
        },
        set = fun(key, value) {
            self.items.(key) = value;
            self.defined.(key) = true;
        },
        has = fun(key) {
            return match (self.defined.(key)) {
                true -> true;
                _ -> false;
            };
        },
        unset = fun(key) {
            self.items.(key) = nil;
            self.defined.(key) = false;
        },
    ];
    return self;
}

fun reverseList(list) {
    reversed := List();
    i := list.size() - 1; while() { i >= 0; } {
        reversed.add(list.get(i));
        i = i - 1;
    };
    return reversed;
}

fun findLadder(start, end, words) {
    fun makeAdjacents(words) {
        map := Map();

        each(words) fun(word) {
            i := 0; while() { i < strlen(word); } {
                node := strslice(word, 0, i) + "*" + strslice(word, i + 1, strlen(word));

                list := match(map.has(node)) {
                    false -> {
                        newList := List();
                        map.set(node, newList);
                        newList;
                    }
                    true -> map.get(node);
                };

                list.add(word);
                i = i + 1;
            };
        };

        return map;
    }

    fun backtrack(start, end, visited) {
        curr := end;
        path := List();
        path.add(curr);
        while() { curr != start; } {
            before := visited.get(curr);
            path.add(before);
            curr = before;
        };
        return path;
    }
    
    neighbors := makeAdjacents(words);
    queue := Queue();
    queue.add(start);
    visited := Map();
    found := false;

    while() { !queue.empty(); } {
        word := queue.poll();

        match (word == end) {
            true -> {
                found = true;
                return;
            }
            false -> ();
        };

        i := 0; while() { i < strlen(word); } {
            node := strslice(word, 0, i) + "*" + strslice(word, i + 1, strlen(word));
            adjacents := neighbors.get(node);

            each(adjacents) fun(adjacent) {
                match (visited.has(adjacent)) {
                    true -> return;
                    false -> ();
                };

                visited.set(adjacent, word);
                queue.add(adjacent);
            };

            i = i + 1;
        };
    };

    match found {
        true -> return reverseList(backtrack(start, end, visited));
        false -> return nil;
    };
}

{
    start := "LEAD";
    end := "GOLD";
    words := List();
    words.add("LEAD");
    words.add("LAND");
    words.add("LEND");
    words.add("LEER");
    words.add("DEAD");
    words.add("GOLD");
    words.add("LOAD");
    words.add("GOAD");
    words.add("GOOD");

    path := findLadder(start, end, words);
    each(path) fun(segment) {
        print(segment);
    };
    // expect: "LEAD"
    // expect: "LOAD"
    // expect: "GOAD"
    // expect: "GOLD"
}
