fun Map() {
    self := [
        defined = [],
        items = [],
        get = fun(key) {
            return match (self.defined.(key)) {
                true -> self.items.(key);
                _ -> nil;
            };
        },
        set = fun(key, value) {
            // print(self.items);
            self.items.(key) = value;
            self.defined.(key) = true;
        },
        has = fun(key) {
            return match (self.defined.(key)) {
                true -> true;
                _ -> false;
            };
        },
        unset = fun(key) {
            self.items.(key) = nil;
            self.defined.(key) = false;
        },
        keys = fun() {
            result := [];
            itemKeys := keys(self.items);
            resultLen := 0;
            i := 0; while() { i < itemKeys.len; } {
                match (self.defined.(itemKeys.(i))) {
                    true -> {
                        result.(resultLen) = itemKeys.(i);
                        resultLen = resultLen + 1;
                    }
                    _ -> ();
                };
                i = i + 1;
            };
            result.("len") = resultLen;
            return result;
        }
    ];
    return self;
}

m := Map();
m.set("foo", "bar");
m.set("bar", "baz");
print(m.has("foo")); // expect: "true"
print(m.get("foo")); // expect: "bar"

{
    k := m.keys();
    i := 0; while() { i < k.len; } {
        print(strlen(k.(i))); // Order is not guaranteed.
        i = i + 1;
    };
    // expect: "3"
    // expect: "3"
}
