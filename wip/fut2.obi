class Object {}
class List {
  init() {
    this._items = Object();
    this.len = 0;
  }
  add(item) {
    this._items.(this.len) = item;
    this.len = this.len + 1;
  }
}

fun while(p, f) {
  match (p()) {
    true -> {
      f();
      while(p, f);
    }
    false -> nil;
  };
}

class Future {
  init(fn) {
    this._state = 0;
    this._handled = false;
    this._value = nil;
    this._deferreds = List();
    this.doResolve(fn);
  }

  handle(deferred) {
    self := this;
    while() { self._state == 3 } {
      self = self._value;
    };
    match (self._state == 0) {
      true -> self._deferreds.add(deferred);
      _ -> return;
    };
    self._handled = true;
    // immediatefn
  }

  resolve(newValue) {
    self := this;
    match (type(newValue) == "Future") {
      true -> {
        then := newValue.then;
        self._state = 3;
        self._value = newValue;
        self.finale();
        return;
      };
      // _ -> print("what " + type(newValue));
    };
    self._state = 1;
    self._value = newValue;
    self.finale();
  }

  reject(newValue) {
    this._state = 2;
    this._value = newValue;
    this.finale();
  }

  finale() {
    // if (this._state == 2 and this._deferreds.len == 0) {
      // not sure
    // }

    i := 0; while({ i < this._deferreds.len; }) {
      this.handle(this._deferreds.(i));
      i = i + 1;
    };
  }

  doResolve(fn) {
    done := false;
    fn(fun(value) {
      if (done) return;
      done = true;
      this.resolve(value);
    }, fun(reason) {
      if (done) return;
      done = true;
      this.reject(reason);
    });
  }

  then(onF, onR) {
    this.handle()
  }
}

Future(fun (resolve, reject) {
  delay(1000, fun() {
    resolve("42");
  });
}).then(fun (result) {
  print(result);
  "52";
}).then(fun (result) {
  print(result);
});